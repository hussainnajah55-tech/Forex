import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import requests
import warnings
warnings.filterwarnings('ignore')

# --- Page Config ---
st.set_page_config(page_title="AI Trading Signal", layout="wide")
st.title("🎯 AI Trading Signal Generator (MVP)")
st.markdown("""
**⚠️ Disclaimer:** This is an educational demo only. Signals are generated by a machine learning model for demonstration purposes.
They are NOT financial advice. Always do your own research and backtesting before any investment.
""")

# --- Sidebar for Input ---
st.sidebar.header("Settings")
symbol = st.sidebar.text_input("Symbol (e.g., BTCUSDT, AAPL)", value="BTCUSDT").upper()
days = st.sidebar.slider("Days of Historical Data", min_value=30, max_value=365, value=90)
train_ratio = st.sidebar.slider("Data Split Ratio (Train/Test)", min_value=0.5, max_value=0.9, value=0.8, step=0.05)

# --- Simulate/Fetch Data ---
@st.cache_data(ttl=3600)
def get_data(symbol, days):
    """
    Fethes or simulates price data.
    Replace this with a real API call (e.g., from Binance, Yahoo Finance) if needed.
    """
    try:
        # Try to fetch from Yahoo Finance or Binance (example placeholder)
        # For now, we simulate data for the demo
        dates = pd.date_range(end=datetime.today(), periods=days)
        prices = np.cumsum(np.random.randn(days) * 0.01) + 100  # Random walk
        df = pd.DataFrame({'Close': prices}, index=dates)
        df['High'] = df['Close'] * (1 + np.random.rand() * 0.02)
        df['Low'] = df['Close'] * (1 - np.random.rand() * 0.02)
        df['Open'] = df['Close'].shift(1)
        df['Volume'] = np.random.randint(1000, 10000, size=days)
        df.dropna(inplace=True)
        return df
    except Exception as e:
        st.error(f"Data fetch error (using simulation): {e}")
        # Fallback to simulation
        dates = pd.date_range(end=datetime.today(), periods=days)
        prices = np.cumsum(np.random.randn(days) * 0.01) + 100
        df = pd.DataFrame({'Close': prices}, index=dates)
        df['High'] = df['Close'] * (1 + np.random.rand() * 0.02)
        df['Low'] = df['Close'] * (1 - np.random.rand() * 0.02)
        df['Open'] = df['Close'].shift(1)
        df['Volume'] = np.random.randint(1000, 10000, size=days)
        df.dropna(inplace=True)
        return df

# --- Generate Features ---
def generate_features(df):
    df = df.copy()
    # RSI
    delta = df['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    # MACD
    exp12 = df['Close'].ewm(span=12, adjust=False).mean()
    exp26 = df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = exp12 - exp26
    df['MACD_Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
    
    # Moving Averages
    df['SMA_20'] = df['Close'].rolling(window=20).mean()
    df['SMA_50'] = df['Close'].rolling(window=50).mean()
    
    # Lagged features
    df['Prev_Close'] = df['Close'].shift(1)
    
    # Target: 1 if next close > current close (buy), else 0 (sell/hold)
    df['Target'] = (df['Close'].shift(-1) > df['Close']).astype(int)
    
    df.dropna(inplace=True)
    return df

# --- Train Model ---
def train_model(df, train_ratio):
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score

    features = ['RSI', 'MACD', 'MACD_Signal', 'SMA_20', 'SMA_50', 'Prev_Close']
    X = df[features]
    y = df['Target']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=train_ratio, shuffle=False)
    
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Evaluate
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    return model, accuracy, X_test.index, y_test, y_pred

# --- Main Execution ---
df = get_data(symbol, days)
df_eng = generate_features(df)

if df_eng.empty:
    st.error("Not enough data to generate features.")
else:
    model, accuracy, test_dates, y_test, y_pred = train_model(df_eng, train_ratio)
    
    # Display Accuracy
    st.metric("Model Accuracy (on test set)", f"{accuracy:.2%}")
    
    # Latest Signal
    latest_data = df_eng.iloc[-1][['RSI', 'MACD', 'MACD_Signal', 'SMA_20', 'SMA_50', 'Prev_Close']].values.reshape(1, -1)
    prediction = model.predict(latest_data)[0]
    signal = "BUY 🟢" if prediction == 1 else "SELL 🔴"
    st.subheader(f"Current Signal for {symbol}: {signal}")
    
    # Plot
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.1,
                        subplot_titles=('Price and Moving Averages', 'RSI'))
    
    # Price and MAs
    fig.add_trace(go.Scatter(x=df.index, y=df['Close'], name='Close', line=dict(color='blue')), row=1, col=1)
    fig.add_trace(go.Scatter(x=df_eng.index, y=df_eng['SMA_20'], name='SMA 20', line=dict(color='orange')), row=1, col=1)
    fig.add_trace(go.Scatter(x=df_eng.index, y=df_eng['SMA_50'], name='SMA 50', line=dict(color='red')), row=1, col=1)
    
    # RSI
    fig.add_trace(go.Scatter(x=df_eng.index, y=df_eng['RSI'], name='RSI', line=dict(color='purple')), row=2, col=1)
    fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1)
    
    fig.update_layout(height=600, showlegend=True)
    st.plotly_chart(fig, use_container_width=True)
    
    # Backtest Results (Simple)
    st.subheader("Backtest Results (On Test Set)")
    backtest_df = pd.DataFrame({'Date': test_dates, 'Actual': y_test, 'Predicted': y_pred})
    backtest_df['Correct'] = backtest_df['Actual'] == backtest_df['Predicted']
    backtest_accuracy = backtest_df['Correct'].mean()
    st.metric("Backtest Accuracy", f"{backtest_accuracy:.2%}")
    st.dataframe(backtest_df.tail(10))

st.markdown("---")
st.markdown("Built with Streamlit | Model: Random Forest | Features: RSI, MACD, Moving Averages")
